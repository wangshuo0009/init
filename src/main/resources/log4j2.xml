<?xml version="1.0" encoding="UTF-8"?>

<Configuration status="WARN" monitorInterval="0">
    <!-- 配置公共的有可能调整的变量 -->
    <Properties>
        <!--应用名称-->
        <property name="APP.NAME">${spring:spring.application.name}</property>
        <!-- 日志级别 -->
        <Property name="LOG.LEVEL">info</Property>

        <!-- 日志文件根目录 -->
        <!--读取 SprigBoot yml中的 logging.file.name 参数-->
        <property name="LOG.HOME">${spring:logging.file.name}</property>

        <!-- 日志输出表达式 -->
        <!--        <property name="LOG.PATTERN">%-d{yyyy-MM-dd HH:mm:ss.SSS}[ %t:%r ] - [%-5p] %c-%M:%L - %X{PFTID} - %m%n%throwable{full}</property>-->

        <Property name="LOG.PATTERN">[%p]%d{yyyy-MM-dd HH:mm:ss.SSS}[%X{trace_id}][%t][%c#%M:%L]%m %n</Property>

        <!-- Buffer单位为字节，默认是8K，IO BLOCK大小默认也是8K。即当日志内容达到8k时，才会将日志输出到日志输出目的地(使用Async logger输出日志，buffersize在相应日志频率下，简单来说越大越好) -->
        <Property name="RollingRandomAccessFile.bufferSize">8192</Property>
        <!-- 是否追加 -->
        <Property name="RollingRandomAccessFile.append">true</Property>
        <!-- 日志按日期封存策略(每天封存一次) -->
        <Property name="TimeBasedTriggeringPolicy.interval">1</Property>
        <!-- 是否打印方法名和行号(开启对性能有影响,可以从异常堆栈找方法名和行号) -->
        <Property name="Logger.includeLocation">true</Property>
        <!-- 开启会将日志打到具体文件和控制台,生产环境建议只打到文件即可 -->
        <Property name="Logger.additivity">true</Property>


    </Properties>
    <!-- 输出控制 -->
    <Appenders>
        <!-- 控制台输出 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式(控制台简单输出即可) -->
            <!--            <PatternLayout pattern="[%p]%d{HH:mm:ss} %m [%t][%c{1}#%M:%L]%n" />-->
            <PatternLayout pattern="${LOG.PATTERN}"/>
        </Console>
        <!-- debug -->
        <RollingRandomAccessFile name="debug" fileName="${LOG.HOME}/debug/debug.log"
                                 filePattern="${LOG.HOME}/debug/debug-%d{yyyyMMdd}-%i.log"
                                 bufferSize="${RollingRandomAccessFile.bufferSize}" immediateFlush="false"
                                 append="${RollingRandomAccessFile.append}">
            <Filters>
                <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG.PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${TimeBasedTriggeringPolicy.interval}"
                                           modulate="true"/><!-- 按天封存 -->
                <SizeBasedTriggeringPolicy size="100MB"/><!-- 当文件体积大于size指定的值时，触发Rolling -->
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG.HOME}/debug" maxDepth="1">
                    <IfFileName glob="debug-*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="10"/>
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
        <!-- info -->
        <RollingRandomAccessFile name="info" fileName="${LOG.HOME}/info/info.log"
                                 filePattern="${LOG.HOME}/info/info-%d{yyyyMMdd}-%i.log"
                                 bufferSize="${RollingRandomAccessFile.bufferSize}" immediateFlush="false"
                                 append="${RollingRandomAccessFile.append}">
            <Filters>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG.PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${TimeBasedTriggeringPolicy.interval}"
                                           modulate="true"/><!-- 按天封存 -->
                <SizeBasedTriggeringPolicy size="500MB"/><!-- 当文件体积大于size指定的值时，触发Rolling -->
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG.HOME}/info" maxDepth="1">
                    <IfFileName glob="info-*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="40"/>
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
        <!-- warn -->
        <RollingRandomAccessFile name="warn" fileName="${LOG.HOME}/warn/warn.log"
                                 filePattern="${LOG.HOME}/warn/warn-%d{yyyyMMdd}-%i.log"
                                 bufferSize="${RollingRandomAccessFile.bufferSize}" immediateFlush="false"
                                 append="${RollingRandomAccessFile.append}">
            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG.PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${TimeBasedTriggeringPolicy.interval}"
                                           modulate="true"/><!-- 按天封存 -->
                <SizeBasedTriggeringPolicy size="100MB"/><!-- 当文件体积大于size指定的值时，触发Rolling -->
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG.HOME}/warn" maxDepth="1">
                    <IfFileName glob="warn-*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="40"/>
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
        <!-- error -->
        <RollingRandomAccessFile name="error" fileName="${LOG.HOME}/error/error.log"
                                 filePattern="${LOG.HOME}/error/error-%d{yyyyMMdd}-%i.log"
                                 bufferSize="${RollingRandomAccessFile.bufferSize}" immediateFlush="false"
                                 append="${RollingRandomAccessFile.append}">
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${LOG.PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="${TimeBasedTriggeringPolicy.interval}"
                                           modulate="true"/><!-- 按天封存 -->
                <SizeBasedTriggeringPolicy size="100MB"/><!-- 当文件体积大于size指定的值时，触发Rolling -->
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG.HOME}/error" maxDepth="1">
                    <IfFileName glob="error-*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="40"/>
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>


    </Appenders>
    <!-- 异步和非异步混合输出模式 -->
    <Loggers>
        <!-- 只输出框架或三方包里的异常日志,此处视情况可以补充调整 -->
        <!--        <AsyncLogger name="com.mysql" level="ERROR"/>-->
        <!--        <AsyncLogger name="com.zaxxer.hikari.pool.HikariPool" level="ERROR"/>-->
        <!--        <AsyncLogger name="org.springframework" level="ERROR" />-->
        <!--        <AsyncLogger name="com.ibatis" level="ERROR" />-->
        <!--        <AsyncLogger name="org.mybatis.spring" level="WARN" />-->
        <!--        <AsyncLogger name="org.apache.ibatis" level="ERROR"/>-->
        <!--        <AsyncLogger name="org.apache" level="ERROR" />-->
        <!--        <AsyncLogger name="org.apache.commons" level="ERROR" />-->
        <!--        <AsyncLogger name="io.netty" level="ERROR" />-->
        <!--        <AsyncLogger name="com.alibaba" level="ERROR" />-->
        <!-- /只输出框架或三方包里的异常日志,此处视情况可以补充调整 -->

        <!-- 配置MyBatis日志级别 -->
        <!--        <Logger  name="org.apache.ibatis" level="debug" additivity="${Logger.additivity}">-->
        <!--            <AppenderRef ref="Console"/>-->
        <!--        </Logger>


        <!- 说明:业务日志。additivity="false"开发环境可以设置为true,便于日志打到控制台,生产环境设置为false -->
        <AsyncLogger name="com.sg" level="${LOG.LEVEL}" includeLocation="${Logger.includeLocation}"
                     additivity="${Logger.additivity}">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="debug"/>
            <AppenderRef ref="info"/>
            <AppenderRef ref="warn"/>
            <AppenderRef ref="error"/>
        </AsyncLogger>


        <!-- 业务日志已使用AsyncLogger做异步输出,所以跟节点可以不用AsyncRoot   控制台日志输出-->
        <Root level="${LOG.LEVEL}" includeLocation="${Logger.includeLocation}">
            <!--            <AppenderRef ref="Console"/>-->
            <AppenderRef ref="debug"/>
            <AppenderRef ref="info"/>
            <AppenderRef ref="warn"/>
            <AppenderRef ref="error"/>
        </Root>
    </Loggers>
</Configuration>